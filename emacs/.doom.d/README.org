#+title: Doom Emacs configuration

* Configuration for Git and other things
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Zbigniew Żołnierowicz"
      user-mail-address "zbigniew.zolnierowicz@gmail.com")

#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* EMMS configuration

#+begin_src emacs-lisp :tangle config.el
(after! emms
        (emms-all)
        (emms-default-players)
        (emms-mode-line-mode 1)
        (emms-playing-time-mode 1)
        (setq emms-source-file-default-directory "~/Music/"
                emms-playlist-buffer-name "*Music*"
                emms-info-asynchronously t
                emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
  )

(map! :leader
        (:prefix ("z" . "EMMS audio player")
        :desc "Open Emms browser" "z" #'emms-browser
        :desc "Go to emms playlist" "a" #'emms-playlist-mode-go
        :desc "Emms pause track" "x" #'emms-pause
        :desc "Emms stop track" "s" #'emms-stop
        :desc "Emms play previous track" "p" #'emms-previous
        :desc "Emms play next track" "n" #'emms-next))
#+end_src

* TODO DAP configuration

#+begin_src emacs-lisp :tangle config.el
(setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src

* Quick terminal shortcut
Map Ctrl-\ to the convenient terminal toggle (like in Astro Nvim)

#+begin_src emacs-lisp :tangle config.el
(global-unset-key "\C-\\")
(global-set-key "\C-\\" '+vterm/toggle)
#+end_src

* Tabs
Add a toggle for showing and hiding tabs
#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("t")
       :desc "Tabs" "t" #'centaur-tabs-mode))
#+end_src
